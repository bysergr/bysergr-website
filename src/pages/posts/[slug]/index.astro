---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import getSortedPosts from "@/utils/getSortedPosts";
import { getPageNumbersPosts } from "@/utils/getPageNumbers";
import { SITE } from "@/config";
import { slugifyPost } from "@/utils/slugify";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  const postResult = posts.map((post) => ({
    params: { slug: slugifyPost(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbersPosts(posts.length).map((pageNum) => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbersPosts(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postsPerPage;
const startPost = lastPost - SITE.postsPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

<Layout>
  <h1>Blog</h1>

  {
    post ? (
      <>
        <h2>{post.data.title}</h2>
        <p>{post.data.date}</p>
      </>
    ) : (
      <h2>no post </h2>
    )
  }

  {
    paginatedPosts.map((post) => (
      <div>
        <h2>{post.data.title}</h2>
      </div>
    ))
  }
</Layout>
